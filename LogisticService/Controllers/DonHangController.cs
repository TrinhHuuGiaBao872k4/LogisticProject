using LogisticService.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
[Route("api/[controller]")]
[ApiController]
public class DonHangController : ControllerBase
{
    private readonly IDonHangService _donHangService;
    private readonly IUnitOfWork _unitOfWork;
    public DonHangController(IDonHangService service, IUnitOfWork unitOfWork)
    {
        _donHangService = service;
        _unitOfWork = unitOfWork;
    }

    [HttpPost("dat-hang")]
    public async Task<IActionResult> DatHang([FromBody] DatHangViewModel model)
    {
        try
        {
            var maDon = await _donHangService.DatHangAsync(model);
            return Ok(new { success = true, maDonHang = maDon });
        }
        catch (Exception ex)
        {
            return BadRequest(new { success = false, message = ex.Message });
        }
    }
    [Authorize(Roles = "VT000")]
    [HttpPut("ChinhSuaDonHang/{maDonHang}")]
    public async Task<IActionResult> CapNhatDonHang(string maDonHang, [FromBody] UpdateDonHangViewModel model)
    {
        var role = User.FindFirstValue(ClaimTypes.Role);
        var user = await _unitOfWork.GetRepository<NguoiDung>().SingleOrDefaultAsync(u => u.MaVaiTro == role);

        if (user == null || user.MaVaiTro.Trim() != "VT000")
            return Unauthorized(new { success = false, message = "Ch·ªâ SuperAdmin m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë∆°n h√†ng" });

        var donHang = await _unitOfWork.DonHangRepository.GetByIdAsync(maDonHang);
        if (donHang == null)
            return NotFound("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
        // üîé Ki·ªÉm tra ng√†y h·ª£p l·ªá
        if (model.NgayVanChuyen == default || model.NgayDenDuKien == default)
            return BadRequest("Ng√†y v·∫≠n chuy·ªÉn v√† ng√†y ƒë·∫øn d·ª± ki·∫øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c sai ƒë·ªãnh d·∫°ng");

        if (model.NgayDenDuKien > model.NgayVanChuyen)
            return BadRequest("Ng√†y ƒë·∫øn d·ª± ki·∫øn kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ng√†y v·∫≠n chuy·ªÉn");

        var minValidDate = DateTime.Now.AddYears(-5);
        var maxValidDate = DateTime.Now.AddYears(10);
        if (model.NgayVanChuyen < minValidDate || model.NgayVanChuyen > maxValidDate ||
            model.NgayDenDuKien < minValidDate || model.NgayDenDuKien > maxValidDate)
        {
            return BadRequest("Ng√†y v·∫≠n chuy·ªÉn v√† ng√†y ƒë·∫øn d·ª± ki·∫øn ph·∫£i n·∫±m trong kho·∫£ng h·ª£p l·ªá");
        }
        donHang.NgayVanChuyen = model.NgayVanChuyen;
        donHang.NgayDenDuKien = model.NgayDenDuKien;
        donHang.TienShip = model.TienShip;

        _unitOfWork.DonHangRepository.Update(donHang);
        await _unitOfWork.SaveChangesAsync();

        return Ok(new { success = true, message = "C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng" });
    }
    [Authorize(Roles = "VT000")]
    [HttpPut("HuyDonHang/{maDonHang}")]
    public async Task<IActionResult> XoaDonHang(string maDonHang)
    {
        var role = User.FindFirstValue(ClaimTypes.Role);
        var user = await _unitOfWork.GetRepository<NguoiDung>().SingleOrDefaultAsync(u => u.MaVaiTro == role);

        if (user == null || user.MaVaiTro.Trim() != "VT000")
            return Unauthorized(new { success = false, message = "Ch·ªâ SuperAdmin m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë∆°n h√†ng" });

        var donHang = await _unitOfWork.DonHangRepository.GetByIdAsync(maDonHang);
        if (donHang == null)
            return NotFound("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");

        // ‚úÖ Ghi tr·∫°ng th√°i m·ªõi v√†o LichSuTrangThaiDonHang
        var maTrangThai = "TT05"; // M√£ tr·∫°ng th√°i 'ƒê√£ h·ªßy'

        var lichSu = new LichSuTrangThaiDonHang
        {
            MaLichSu = "LS" + DateTime.Now.Ticks,
            MaDonHang = maDonHang,
            MaTrangThai = maTrangThai,
            NgayCapNhat = DateTime.Now,
            GhiChu = "ƒê∆°n h√†ng b·ªã h·ªßy b·ªüi Admin"
        };
        await _unitOfWork.GetRepository<LichSuTrangThaiDonHang>().AddAsync(lichSu);

        // ‚úÖ Ghi t√¨nh tr·∫°ng chi ti·∫øt
        var tinhTrang = new TinhTrangDonHangChiTiet
        {
            MaTinhTrangChiTiet = "TTCT" + DateTime.Now.Ticks,
            MaDonHang = maDonHang,
            NoiDung = "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy",
            ThoiGian = DateTime.Now,
            GhiChu = "Admin x·ª≠ l√Ω h·ªßy"
        };
        await _unitOfWork.GetRepository<TinhTrangDonHangChiTiet>().AddAsync(tinhTrang);

        await _unitOfWork.SaveChangesAsync();

        return Ok(new { success = true, message = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i 'ƒê√£ h·ªßy'" });
    }

}